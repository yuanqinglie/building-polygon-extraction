# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FK-ltoaKy0p55e58DIfDWHxAujIBy7zX
"""

class ResNet50Encoder(nn.Module):
    def __init__(self, pretrained: bool = True):
        super().__init__()
        # Load pretrained ResNet50
        resnet = models.resnet50(pretrained=pretrained)

        # Remove final fully connected layer and average pooling layer
        self.conv1 = resnet.conv1
        self.bn1 = resnet.bn1
        self.relu = resnet.relu
        self.maxpool = resnet.maxpool

        # Intermediate layers
        self.layer1 = resnet.layer1  # Output: 256 channels, 1/4 size
        self.layer2 = resnet.layer2  # Output: 512 channels, 1/8 size
        self.layer3 = resnet.layer3  # Output: 1024 channels, 1/16 size
        self.layer4 = resnet.layer4  # Output: 2048 channels, 1/32 size

        # Freeze BatchNorm layer parameters
        self._freeze_bn()

    def _freeze_bn(self):
        """Freeze BatchNorm layers"""
        for m in self.modules():
            if isinstance(m, nn.BatchNorm2d):
                m.eval()
                for param in m.parameters():
                    param.requires_grad = False

    def forward(self, x: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor]:
        # Initial convolution
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu(x)
        x = self.maxpool(x)

        # Four feature layers
        L2 = self.layer1(x)  # [B, 256, H/4, W/4]
        L3 = self.layer2(L2)  # [B, 512, H/8, W/8]
        L4 = self.layer3(L3)  # [B, 1024, H/16, W/16]
        L5 = self.layer4(L4)  # [B, 2048, H/32, W/32]

        return L2, L3, L4, L5